// System v6.0.0
using System;
// System.Collections.Generic v6.0.0
using System.Collections.Generic;
// System.ComponentModel.DataAnnotations v6.0.0
using System.ComponentModel.DataAnnotations;
// System.ComponentModel.DataAnnotations.Schema v6.0.0
using System.ComponentModel.DataAnnotations.Schema;

namespace Backend.Core.Entities
{
    /// <summary>
    /// Represents a customer organization that receives services.
    /// Manages customer information including company details, contacts, and contracts
    /// with comprehensive validation and relationship mapping.
    /// </summary>
    [Table("Customers")]
    public class Customer
    {
        /// <summary>
        /// Primary key identifier for the customer.
        /// Auto-generated by the database.
        /// </summary>
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        /// <summary>
        /// Name of the customer organization.
        /// Required field with length between 2 and 100 characters.
        /// </summary>
        [Required(ErrorMessage = "Customer name is required")]
        [StringLength(100, MinimumLength = 2, ErrorMessage = "Name must be between 2 and 100 characters")]
        public string Name { get; set; }

        /// <summary>
        /// Unique identifier code for the customer.
        /// Required field with maximum length of 50 characters.
        /// </summary>
        [Required(ErrorMessage = "Customer code is required")]
        [StringLength(50, ErrorMessage = "Code cannot exceed 50 characters")]
        [Index(IsUnique = true)]
        public string Code { get; set; }

        /// <summary>
        /// Indicates whether the customer record is currently active.
        /// </summary>
        [Required]
        public bool IsActive { get; set; }

        /// <summary>
        /// UTC timestamp when the customer record was created.
        /// </summary>
        [Required]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Username or identifier of the user who created the customer record.
        /// </summary>
        [Required(ErrorMessage = "Created by information is required")]
        [StringLength(100, ErrorMessage = "Created by identifier cannot exceed 100 characters")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Collection of contact IDs associated with this customer.
        /// Not mapped to database as it's managed through a separate relationship table.
        /// </summary>
        [NotMapped]
        public ICollection<int> ContactIds { get; set; }

        /// <summary>
        /// Navigation property for the collection of contracts associated with this customer.
        /// Enables lazy loading of related contract data.
        /// </summary>
        [InverseProperty("Customer")]
        public virtual ICollection<Contract> Contracts { get; set; }

        /// <summary>
        /// Initializes a new instance of the Customer class with required validation.
        /// </summary>
        /// <param name="createdBy">Username or identifier of the user creating the customer record</param>
        /// <exception cref="ArgumentException">Thrown when createdBy is null or empty</exception>
        public Customer(string createdBy)
        {
            if (string.IsNullOrWhiteSpace(createdBy))
            {
                throw new ArgumentException("Creator information must be provided", nameof(createdBy));
            }

            ContactIds = new List<int>();
            Contracts = new List<Contract>();
            IsActive = true;
            CreatedAt = DateTime.UtcNow;
            CreatedBy = createdBy;
        }

        /// <summary>
        /// Validates the customer entity state.
        /// </summary>
        /// <returns>True if the entity is in a valid state, false otherwise.</returns>
        public bool Validate()
        {
            if (string.IsNullOrWhiteSpace(Name))
                return false;

            if (string.IsNullOrWhiteSpace(Code))
                return false;

            if (string.IsNullOrWhiteSpace(CreatedBy))
                return false;

            return true;
        }
    }
}
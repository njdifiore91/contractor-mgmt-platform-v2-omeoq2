name: Backend CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/**'

env:
  DOTNET_VERSION: '7.0.x'
  SOLUTION_PATH: 'src/backend/Backend.sln'
  DOCKER_FILE_PATH: 'src/backend/Dockerfile'
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  HEALTH_CHECK_URL: ${{ secrets.HEALTH_CHECK_URL }}
  MAX_DEPLOYMENT_ATTEMPTS: 3
  DEPLOYMENT_TIMEOUT: 300

jobs:
  deploy:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}
    concurrency:
      group: production
      cancel-in-progress: false
    timeout-minutes: 60

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          include-prerelease: false

      - name: Cache NuGet Packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-

      - name: Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ github.sha }}
          restore-keys: |
            docker-

      - name: Restore NuGet Packages
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build Solution
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Run Tests with Coverage
        run: |
          dotnet test ${{ env.SOLUTION_PATH }} \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --logger:"trx;LogFileName=test-results.trx"

      - name: Scan Container Vulnerabilities
        run: |
          docker build -t temp-image -f ${{ env.DOCKER_FILE_PATH }} .
          docker scan temp-image || true

      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ env.REGISTRY_LOGIN_SERVER }}/backend:${{ github.sha }}"
          docker build -t $IMAGE_TAG -f ${{ env.DOCKER_FILE_PATH }} .
          docker push $IMAGE_TAG

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run Database Migrations
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef database update --project src/backend/Database/Database.csproj
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.DB_CONNECTION_STRING }}

      - name: Deploy to Azure Web App
        id: deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          images: ${{ env.REGISTRY_LOGIN_SERVER }}/backend:${{ github.sha }}

      - name: Verify Deployment Health
        run: |
          attempt=1
          while [ $attempt -le ${{ env.MAX_DEPLOYMENT_ATTEMPTS }} ]; do
            if curl -s -f ${{ env.HEALTH_CHECK_URL }}; then
              echo 'Deployment health check passed'
              exit 0
            fi
            echo "Attempt $attempt failed, retrying..."
            attempt=$(( attempt + 1 ))
            sleep 30
          done
          echo "Deployment health check failed after ${{ env.MAX_DEPLOYMENT_ATTEMPTS }} attempts"
          exit 1

      - name: Handle Deployment Failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          az webapp deployment slot swap \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --slot staging \
            --target-slot production
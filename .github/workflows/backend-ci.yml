name: CI workflow configuration for backend application

on:
  push:
    branches: [ main ]
    paths: [ 'src/backend/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'src/backend/**' ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run on Sundays at midnight

env:
  DOTNET_VERSION: '7.0.x'
  SOLUTION_PATH: 'src/backend/Backend.sln'
  TEST_PROJECTS: 'src/backend/tests/**/*.csproj'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  security_scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: csharp

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build for CodeQL Analysis
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:csharp"

      - name: Upload Security Results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: security-results
          retention-days: 30

  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Run tests
        run: |
          dotnet test ${{ env.SOLUTION_PATH }} \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: TestResults
          retention-days: 14

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: TestResults/**/coverage.cobertura.xml
          retention-days: 14

  code_quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Run SonarQube analysis
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"backend" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          dotnet build ${{ env.SOLUTION_PATH }} --configuration Release
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: sonarqube-report
          path: .sonarqube
          retention-days: 14